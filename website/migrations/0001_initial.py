# Generated by Django 3.1.4 on 2021-07-08 03:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import website.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='kabupaten',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nama_kab', models.CharField(max_length=50, verbose_name='Nama kabupaten')),
                ('Latitude', models.FloatField(max_length=50, verbose_name='Latitude')),
                ('Longitude', models.FloatField(max_length=50, verbose_name='Longitude')),
            ],
        ),
        migrations.CreateModel(
            name='pupuk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nama_toko', models.CharField(max_length=50, verbose_name='Nama Toko')),
                ('Latitude', models.FloatField(max_length=50, verbose_name='Latitude')),
                ('Longitude', models.FloatField(max_length=50, verbose_name='Longitude')),
                ('no_tlp', models.CharField(max_length=50, verbose_name='Nomor Telpon')),
            ],
        ),
        migrations.CreateModel(
            name='lahan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nama_file', models.FileField(blank=True, null=True, upload_to=website.models._upload_path, validators=[django.core.validators.FileExtensionValidator(['kmz']), website.models.file_size])),
                ('id_kab', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='website.kabupaten')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveIntegerField(choices=[(1, 'user'), (2, 'admin')], default=1)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('is_student', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
